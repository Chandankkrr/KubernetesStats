// Generated by https://quicktype.io

using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace KubernetesStats.Models
{
    public class ServiceInfo
    {
        [JsonProperty("kind")] public string Kind { get; set; }

        [JsonProperty("apiVersion")] public string ApiVersion { get; set; }

        [JsonProperty("metadata")] public ServicesMetadata Metadata { get; set; }

        [JsonProperty("items")] public Item[] Items { get; set; }
    }

    public class Item
    {
        [JsonProperty("metadata")] public ItemMetadata Metadata { get; set; }

        [JsonProperty("spec")] public Spec Spec { get; set; }

        [JsonProperty("status")] public Status Status { get; set; }
    }

    public class ItemMetadata
    {
        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("namespace")] public string Namespace { get; set; }

        [JsonProperty("uid")] public Guid Uid { get; set; }

        [JsonProperty("resourceVersion")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long ResourceVersion { get; set; }

        [JsonProperty("creationTimestamp")] public DateTimeOffset CreationTimestamp { get; set; }

        [JsonProperty("labels")] public Labels Labels { get; set; }

        [JsonProperty("managedFields")] public ManagedField[] ManagedFields { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Annotations { get; set; }
    }

    public class Annotations
    {
        [JsonProperty("prometheus.io/port", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? PrometheusIoPort { get; set; }

        [JsonProperty("prometheus.io/scrape", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool? PrometheusIoScrape { get; set; }

        [JsonProperty("kubectl.kubernetes.io/last-applied-configuration", NullValueHandling = NullValueHandling.Ignore)]
        public string KubectlKubernetesIoLastAppliedConfiguration { get; set; }
    }

    public class Labels
    {
        [JsonProperty("component", NullValueHandling = NullValueHandling.Ignore)]
        public string Component { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public string Provider { get; set; }

        [JsonProperty("k8s-app", NullValueHandling = NullValueHandling.Ignore)]
        public string K8SApp { get; set; }

        [JsonProperty("kubernetes.io/cluster-service", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool? KubernetesIoClusterService { get; set; }

        [JsonProperty("kubernetes.io/name", NullValueHandling = NullValueHandling.Ignore)]
        public string KubernetesIoName { get; set; }
    }

    public class ManagedField
    {
        [JsonProperty("manager")] public string Manager { get; set; }

        [JsonProperty("operation")] public string Operation { get; set; }

        [JsonProperty("apiVersion")] public string ApiVersion { get; set; }

        [JsonProperty("time")] public DateTimeOffset Time { get; set; }

        [JsonProperty("fieldsType")] public string FieldsType { get; set; }

        [JsonProperty("fieldsV1")] public FieldsV1 FieldsV1 { get; set; }
    }

    public class FieldsV1
    {
        [JsonProperty("f:metadata")] public FMetadata FMetadata { get; set; }

        [JsonProperty("f:spec")] public FSpec FSpec { get; set; }
    }

    public class FMetadata
    {
        [JsonProperty("f:labels")] public FLabels FLabels { get; set; }

        [JsonProperty("f:annotations", NullValueHandling = NullValueHandling.Ignore)]
        public FAnnotations FAnnotations { get; set; }
    }

    public class FAnnotations
    {
        [JsonProperty(".")] public LoadBalancer Empty { get; set; }

        [JsonProperty("f:prometheus.io/port", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FPrometheusIoPort { get; set; }

        [JsonProperty("f:prometheus.io/scrape", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FPrometheusIoScrape { get; set; }

        [JsonProperty("f:kubectl.kubernetes.io/last-applied-configuration",
            NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FKubectlKubernetesIoLastAppliedConfiguration { get; set; }
    }

    public class LoadBalancer
    {
    }

    public class FLabels
    {
        [JsonProperty(".")] public LoadBalancer Empty { get; set; }

        [JsonProperty("f:component", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FComponent { get; set; }

        [JsonProperty("f:provider", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FProvider { get; set; }

        [JsonProperty("f:k8s-app", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FK8SApp { get; set; }

        [JsonProperty("f:kubernetes.io/cluster-service", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FKubernetesIoClusterService { get; set; }

        [JsonProperty("f:kubernetes.io/name", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FKubernetesIoName { get; set; }
    }

    public class FSpec
    {
        [JsonProperty("f:clusterIP", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FClusterIp { get; set; }

        [JsonProperty("f:ipFamilyPolicy", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FIpFamilyPolicy { get; set; }

        [JsonProperty("f:ports")] public FPorts FPorts { get; set; }

        [JsonProperty("f:sessionAffinity")] public LoadBalancer FSessionAffinity { get; set; }

        [JsonProperty("f:type")] public LoadBalancer FType { get; set; }

        [JsonProperty("f:selector", NullValueHandling = NullValueHandling.Ignore)]
        public FSelector FSelector { get; set; }
    }

    public class FPorts
    {
        [JsonProperty(".")] public LoadBalancer Empty { get; set; }

        [JsonProperty("k:{\"port\":443,\"protocol\":\"TCP\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KPort KPort443ProtocolTcp { get; set; }

        [JsonProperty("k:{\"port\":53,\"protocol\":\"TCP\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KPort KPort53ProtocolTcp { get; set; }

        [JsonProperty("k:{\"port\":53,\"protocol\":\"UDP\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KPort KPort53ProtocolUdp { get; set; }

        [JsonProperty("k:{\"port\":9153,\"protocol\":\"TCP\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KPort KPort9153ProtocolTcp { get; set; }

        [JsonProperty("k:{\"port\":8000,\"protocol\":\"TCP\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KPort KPort8000ProtocolTcp { get; set; }
    }

    public class KPort
    {
        [JsonProperty(".")] public LoadBalancer Empty { get; set; }

        [JsonProperty("f:name", NullValueHandling = NullValueHandling.Ignore)]
        public LoadBalancer FName { get; set; }

        [JsonProperty("f:port")] public LoadBalancer FPort { get; set; }

        [JsonProperty("f:protocol")] public LoadBalancer FProtocol { get; set; }

        [JsonProperty("f:targetPort")] public LoadBalancer FTargetPort { get; set; }
    }

    public class FSelector
    {
        [JsonProperty(".")] public LoadBalancer Empty { get; set; }

        [JsonProperty("f:k8s-app")] public LoadBalancer FK8SApp { get; set; }
    }

    public class Spec
    {
        [JsonProperty("ports")] public Port[] Ports { get; set; }

        [JsonProperty("clusterIP")] public string ClusterIp { get; set; }

        [JsonProperty("clusterIPs")] public string[] ClusterIPs { get; set; }

        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("sessionAffinity")] public string SessionAffinity { get; set; }

        [JsonProperty("ipFamilies")] public string[] IpFamilies { get; set; }

        [JsonProperty("ipFamilyPolicy")] public string IpFamilyPolicy { get; set; }

        [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
        public Selector Selector { get; set; }
    }

    public class Port
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("protocol")] public string Protocol { get; set; }

        [JsonProperty("port")] public long PortPort { get; set; }

        [JsonProperty("targetPort")] public long TargetPort { get; set; }
    }

    public class Selector
    {
        [JsonProperty("k8s-app")] public string K8SApp { get; set; }
    }

    public class Status
    {
        [JsonProperty("loadBalancer")] public LoadBalancer LoadBalancer { get; set; }
    }

    public class ServicesMetadata
    {
        [JsonProperty("resourceVersion")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long ResourceVersion { get; set; }
    }

    public class Services
    {
        public static Services FromJson(string json) =>
            JsonConvert.DeserializeObject<Services>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Services self) =>
            JsonConvert.SerializeObject((object?)self, (JsonSerializerSettings?)Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }

            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }

            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}