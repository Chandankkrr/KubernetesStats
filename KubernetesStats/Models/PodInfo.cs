// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var podInfo = PodInfo.FromJson(jsonString);

namespace KubernetesStats.Models.Pod
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PodInfo
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("metadata")]
        public PodInfoMetadata Metadata { get; set; }

        [JsonProperty("items")]
        public PodInfoItem[] Items { get; set; }
    }

    public partial class PodInfoItem
    {
        [JsonProperty("metadata")]
        public ItemMetadata Metadata { get; set; }

        [JsonProperty("spec")]
        public Spec Spec { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }
    }

    public partial class ItemMetadata
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("generateName", NullValueHandling = NullValueHandling.Ignore)]
        public string GenerateName { get; set; }

        [JsonProperty("namespace")]
        public string Namespace { get; set; }

        [JsonProperty("uid")]
        public Guid Uid { get; set; }

        [JsonProperty("resourceVersion")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ResourceVersion { get; set; }

        [JsonProperty("creationTimestamp")]
        public DateTimeOffset CreationTimestamp { get; set; }

        [JsonProperty("labels")]
        public Labels Labels { get; set; }

        [JsonProperty("ownerReferences", NullValueHandling = NullValueHandling.Ignore)]
        public OwnerReference[] OwnerReferences { get; set; }

        [JsonProperty("managedFields")]
        public ManagedField[] ManagedFields { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public Annotations Annotations { get; set; }
    }

    public partial class Annotations
    {
        [JsonProperty("kubeadm.kubernetes.io/etcd.advertise-client-urls", NullValueHandling = NullValueHandling.Ignore)]
        public Uri KubeadmKubernetesIoEtcdAdvertiseClientUrls { get; set; }

        [JsonProperty("kubernetes.io/config.hash", NullValueHandling = NullValueHandling.Ignore)]
        public string KubernetesIoConfigHash { get; set; }

        [JsonProperty("kubernetes.io/config.mirror", NullValueHandling = NullValueHandling.Ignore)]
        public string KubernetesIoConfigMirror { get; set; }

        [JsonProperty("kubernetes.io/config.seen", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? KubernetesIoConfigSeen { get; set; }

        [JsonProperty("kubernetes.io/config.source", NullValueHandling = NullValueHandling.Ignore)]
        public string KubernetesIoConfigSource { get; set; }

        [JsonProperty("kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint", NullValueHandling = NullValueHandling.Ignore)]
        public string KubeadmKubernetesIoKubeApiserverAdvertiseAddressEndpoint { get; set; }

        [JsonProperty("kubectl.kubernetes.io/last-applied-configuration", NullValueHandling = NullValueHandling.Ignore)]
        public string KubectlKubernetesIoLastAppliedConfiguration { get; set; }

        [JsonProperty("seccomp.security.alpha.kubernetes.io/pod", NullValueHandling = NullValueHandling.Ignore)]
        public string SeccompSecurityAlphaKubernetesIoPod { get; set; }
    }

    public partial class Labels
    {
        [JsonProperty("k8s-app", NullValueHandling = NullValueHandling.Ignore)]
        public string K8SApp { get; set; }

        [JsonProperty("pod-template-hash", NullValueHandling = NullValueHandling.Ignore)]
        public string PodTemplateHash { get; set; }

        [JsonProperty("component", NullValueHandling = NullValueHandling.Ignore)]
        public string Component { get; set; }

        [JsonProperty("tier", NullValueHandling = NullValueHandling.Ignore)]
        public string Tier { get; set; }

        [JsonProperty("controller-revision-hash", NullValueHandling = NullValueHandling.Ignore)]
        public string ControllerRevisionHash { get; set; }

        [JsonProperty("pod-template-generation", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PodTemplateGeneration { get; set; }
    }

    public partial class ManagedField
    {
        [JsonProperty("manager")]
        public string Manager { get; set; }

        [JsonProperty("operation")]
        public string Operation { get; set; }

        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("fieldsType")]
        public string FieldsType { get; set; }

        [JsonProperty("fieldsV1")]
        public FieldsV1 FieldsV1 { get; set; }
    }

    public partial class FieldsV1
    {
        [JsonProperty("f:metadata", NullValueHandling = NullValueHandling.Ignore)]
        public FMetadata FMetadata { get; set; }

        [JsonProperty("f:spec", NullValueHandling = NullValueHandling.Ignore)]
        public FSpec FSpec { get; set; }

        [JsonProperty("f:status", NullValueHandling = NullValueHandling.Ignore)]
        public FStatus FStatus { get; set; }
    }

    public partial class FMetadata
    {
        [JsonProperty("f:generateName", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FGenerateName { get; set; }

        [JsonProperty("f:labels")]
        public FLabels FLabels { get; set; }

        [JsonProperty("f:ownerReferences", NullValueHandling = NullValueHandling.Ignore)]
        public FOwnerReferences FOwnerReferences { get; set; }

        [JsonProperty("f:annotations", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, EmptyDir> FAnnotations { get; set; }
    }

    public partial class EmptyDir
    {
    }

    public partial class FLabels
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:k8s-app", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FK8SApp { get; set; }

        [JsonProperty("f:pod-template-hash", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FPodTemplateHash { get; set; }

        [JsonProperty("f:component", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FComponent { get; set; }

        [JsonProperty("f:tier", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FTier { get; set; }

        [JsonProperty("f:controller-revision-hash", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FControllerRevisionHash { get; set; }

        [JsonProperty("f:pod-template-generation", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FPodTemplateGeneration { get; set; }
    }

    public partial class FOwnerReferences
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"uid\":\"5c8a2e5c-ebc5-413b-94b1-86597b312031\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KUid KUid5C8A2E5CEbc5413B94B186597B312031 { get; set; }

        [JsonProperty("k:{\"uid\":\"c9ee2887-b9a3-49d1-a312-e4251528c090\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KUid KUidC9Ee2887B9A349D1A312E4251528C090 { get; set; }

        [JsonProperty("k:{\"uid\":\"362cd9b5-1a1d-4c2c-8786-ff2503c517d2\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KUid KUid362Cd9B51A1D4C2C8786Ff2503C517D2 { get; set; }

        [JsonProperty("k:{\"uid\":\"66cad019-c5a9-4053-972b-baa136dd0b5e\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KUid KUid66Cad019C5A94053972BBaa136Dd0B5E { get; set; }

        [JsonProperty("k:{\"uid\":\"13c95d77-b2b0-4ff4-bc8c-0a1f4af24fc3\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KUid KUid13C95D77B2B04Ff4Bc8C0A1F4Af24Fc3 { get; set; }
    }

    public partial class KUid
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:apiVersion")]
        public EmptyDir FApiVersion { get; set; }

        [JsonProperty("f:blockOwnerDeletion", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FBlockOwnerDeletion { get; set; }

        [JsonProperty("f:controller")]
        public EmptyDir FController { get; set; }

        [JsonProperty("f:kind")]
        public EmptyDir FKind { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:uid")]
        public EmptyDir FUid { get; set; }
    }

    public partial class FSpec
    {
        [JsonProperty("f:containers")]
        public FContainers FContainers { get; set; }

        [JsonProperty("f:dnsPolicy")]
        public EmptyDir FDnsPolicy { get; set; }

        [JsonProperty("f:enableServiceLinks")]
        public EmptyDir FEnableServiceLinks { get; set; }

        [JsonProperty("f:nodeSelector", NullValueHandling = NullValueHandling.Ignore)]
        public FNodeSelector FNodeSelector { get; set; }

        [JsonProperty("f:priorityClassName", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FPriorityClassName { get; set; }

        [JsonProperty("f:restartPolicy")]
        public EmptyDir FRestartPolicy { get; set; }

        [JsonProperty("f:schedulerName")]
        public EmptyDir FSchedulerName { get; set; }

        [JsonProperty("f:securityContext")]
        public FSpecFSecurityContext FSecurityContext { get; set; }

        [JsonProperty("f:serviceAccount", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FServiceAccount { get; set; }

        [JsonProperty("f:serviceAccountName", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FServiceAccountName { get; set; }

        [JsonProperty("f:terminationGracePeriodSeconds")]
        public EmptyDir FTerminationGracePeriodSeconds { get; set; }

        [JsonProperty("f:tolerations", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FTolerations { get; set; }

        [JsonProperty("f:volumes")]
        public FVolumes FVolumes { get; set; }

        [JsonProperty("f:hostNetwork", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FHostNetwork { get; set; }

        [JsonProperty("f:nodeName", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FNodeName { get; set; }

        [JsonProperty("f:affinity", NullValueHandling = NullValueHandling.Ignore)]
        public FAffinity FAffinity { get; set; }
    }

    public partial class FAffinity
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:nodeAffinity")]
        public FNodeAffinity FNodeAffinity { get; set; }
    }

    public partial class FNodeAffinity
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:requiredDuringSchedulingIgnoredDuringExecution")]
        public FRequiredDuringSchedulingIgnoredDuringExecution FRequiredDuringSchedulingIgnoredDuringExecution { get; set; }
    }

    public partial class FRequiredDuringSchedulingIgnoredDuringExecution
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:nodeSelectorTerms")]
        public EmptyDir FNodeSelectorTerms { get; set; }
    }

    public partial class FContainers
    {
        [JsonProperty("k:{\"name\":\"coredns\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameCoredns KNameCoredns { get; set; }

        [JsonProperty("k:{\"name\":\"etcd\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameEtcd KNameEtcd { get; set; }

        [JsonProperty("k:{\"name\":\"kube-apiserver\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubeApiserver KNameKubeApiserver { get; set; }

        [JsonProperty("k:{\"name\":\"kube-controller-manager\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubeControllerManager KNameKubeControllerManager { get; set; }

        [JsonProperty("k:{\"name\":\"kube-proxy\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubeProxy KNameKubeProxy { get; set; }

        [JsonProperty("k:{\"name\":\"kube-scheduler\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubeScheduler KNameKubeScheduler { get; set; }

        [JsonProperty("k:{\"name\":\"storage-provisioner\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameStorageProvisioner KNameStorageProvisioner { get; set; }

        [JsonProperty("k:{\"name\":\"vpnkit-controller\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameVpnkitController KNameVpnkitController { get; set; }

        [JsonProperty("k:{\"name\":\"dashboard-metrics-scraper\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameDashboardMetricsScraper KNameDashboardMetricsScraper { get; set; }

        [JsonProperty("k:{\"name\":\"kubernetes-dashboard\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubernetesDashboard KNameKubernetesDashboard { get; set; }
    }

    public partial class KNameCoredns
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:args")]
        public EmptyDir FArgs { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:ports")]
        public KNameCorednsFPorts FPorts { get; set; }

        [JsonProperty("f:readinessProbe")]
        public FLivenessProbeClass FReadinessProbe { get; set; }

        [JsonProperty("f:resources")]
        public KNameCorednsFResources FResources { get; set; }

        [JsonProperty("f:securityContext")]
        public KNameCorednsFSecurityContext FSecurityContext { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameCorednsFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class FLivenessProbeClass
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:failureThreshold")]
        public EmptyDir FFailureThreshold { get; set; }

        [JsonProperty("f:httpGet")]
        public FHttpGet FHttpGet { get; set; }

        [JsonProperty("f:initialDelaySeconds", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FInitialDelaySeconds { get; set; }

        [JsonProperty("f:periodSeconds")]
        public EmptyDir FPeriodSeconds { get; set; }

        [JsonProperty("f:successThreshold")]
        public EmptyDir FSuccessThreshold { get; set; }

        [JsonProperty("f:timeoutSeconds")]
        public EmptyDir FTimeoutSeconds { get; set; }
    }

    public partial class FHttpGet
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:path")]
        public EmptyDir FPath { get; set; }

        [JsonProperty("f:port")]
        public EmptyDir FPort { get; set; }

        [JsonProperty("f:scheme")]
        public EmptyDir FScheme { get; set; }

        [JsonProperty("f:host", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FHost { get; set; }
    }

    public partial class KNameCorednsFPorts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"containerPort\":53,\"protocol\":\"TCP\"}")]
        public KContainerPort KContainerPort53ProtocolTcp { get; set; }

        [JsonProperty("k:{\"containerPort\":53,\"protocol\":\"UDP\"}")]
        public KContainerPort KContainerPort53ProtocolUdp { get; set; }

        [JsonProperty("k:{\"containerPort\":9153,\"protocol\":\"TCP\"}")]
        public KContainerPort KContainerPort9153ProtocolTcp { get; set; }
    }

    public partial class KContainerPort
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:containerPort")]
        public EmptyDir FContainerPort { get; set; }

        [JsonProperty("f:name", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:protocol")]
        public EmptyDir FProtocol { get; set; }
    }

    public partial class KNameCorednsFResources
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:limits")]
        public FLimits FLimits { get; set; }

        [JsonProperty("f:requests")]
        public PurpleFRequests FRequests { get; set; }
    }

    public partial class FLimits
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:memory")]
        public EmptyDir FMemory { get; set; }
    }

    public partial class PurpleFRequests
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:cpu")]
        public EmptyDir FCpu { get; set; }

        [JsonProperty("f:memory")]
        public EmptyDir FMemory { get; set; }
    }

    public partial class KNameCorednsFSecurityContext
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:allowPrivilegeEscalation")]
        public EmptyDir FAllowPrivilegeEscalation { get; set; }

        [JsonProperty("f:capabilities")]
        public FCapabilities FCapabilities { get; set; }

        [JsonProperty("f:readOnlyRootFilesystem")]
        public EmptyDir FReadOnlyRootFilesystem { get; set; }
    }

    public partial class FCapabilities
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:add")]
        public EmptyDir FAdd { get; set; }

        [JsonProperty("f:drop")]
        public EmptyDir FDrop { get; set; }
    }

    public partial class KNameCorednsFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/etc/coredns\"}")]
        public KMountPath KMountPathEtcCoredns { get; set; }
    }

    public partial class KMountPath
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:mountPath")]
        public EmptyDir FMountPath { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:readOnly", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FReadOnly { get; set; }
    }

    public partial class KNameDashboardMetricsScraper
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:ports")]
        public KNameDashboardMetricsScraperFPorts FPorts { get; set; }

        [JsonProperty("f:resources")]
        public EmptyDir FResources { get; set; }

        [JsonProperty("f:securityContext")]
        public KNameDashboardMetricsScraperFSecurityContext FSecurityContext { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameDashboardMetricsScraperFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameDashboardMetricsScraperFPorts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"containerPort\":8000,\"protocol\":\"TCP\"}")]
        public KContainerPort KContainerPort8000ProtocolTcp { get; set; }
    }

    public partial class KNameDashboardMetricsScraperFSecurityContext
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:allowPrivilegeEscalation")]
        public EmptyDir FAllowPrivilegeEscalation { get; set; }

        [JsonProperty("f:readOnlyRootFilesystem")]
        public EmptyDir FReadOnlyRootFilesystem { get; set; }

        [JsonProperty("f:runAsGroup")]
        public EmptyDir FRunAsGroup { get; set; }

        [JsonProperty("f:runAsUser")]
        public EmptyDir FRunAsUser { get; set; }
    }

    public partial class KNameDashboardMetricsScraperFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/tmp\"}")]
        public KMountPath KMountPathTmp { get; set; }
    }

    public partial class KNameEtcd
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public KNameEtcdFResources FResources { get; set; }

        [JsonProperty("f:startupProbe")]
        public FLivenessProbeClass FStartupProbe { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameEtcdFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameEtcdFResources
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:requests")]
        public PurpleFRequests FRequests { get; set; }
    }

    public partial class KNameEtcdFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/run/config/pki/etcd\"}")]
        public KMountPath KMountPathRunConfigPkiEtcd { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/var/lib/etcd\"}")]
        public KMountPath KMountPathVarLibEtcd { get; set; }
    }

    public partial class KNameKubeApiserver
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:readinessProbe")]
        public FLivenessProbeClass FReadinessProbe { get; set; }

        [JsonProperty("f:resources")]
        public KNameKubeApiserverFResources FResources { get; set; }

        [JsonProperty("f:startupProbe")]
        public FLivenessProbeClass FStartupProbe { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameKubeApiserverFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameKubeApiserverFResources
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:requests")]
        public FluffyFRequests FRequests { get; set; }
    }

    public partial class FluffyFRequests
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:cpu")]
        public EmptyDir FCpu { get; set; }
    }

    public partial class KNameKubeApiserverFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/etc/ca-certificates\"}")]
        public KMountPath KMountPathEtcCaCertificates { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/etc/ssl/certs\"}")]
        public KMountPath KMountPathEtcSslCerts { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/run/config/pki\"}")]
        public KMountPath KMountPathRunConfigPki { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/usr/local/share/ca-certificates\"}")]
        public KMountPath KMountPathUsrLocalShareCaCertificates { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/usr/share/ca-certificates\"}")]
        public KMountPath KMountPathUsrShareCaCertificates { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/etc/kubernetes/controller-manager.conf\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KMountPath KMountPathEtcKubernetesControllerManagerConf { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KMountPath KMountPathUsrLibexecKubernetesKubeletPluginsVolumeExec { get; set; }
    }

    public partial class KNameKubeControllerManager
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public KNameKubeApiserverFResources FResources { get; set; }

        [JsonProperty("f:startupProbe")]
        public FLivenessProbeClass FStartupProbe { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameKubeApiserverFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameKubeProxy
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:env")]
        public FEnv FEnv { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public EmptyDir FResources { get; set; }

        [JsonProperty("f:securityContext")]
        public KNameKubeProxyFSecurityContext FSecurityContext { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameKubeProxyFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class FEnv
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"name\":\"NODE_NAME\"}")]
        public KNameNodeName KNameNodeName { get; set; }
    }

    public partial class KNameNodeName
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:valueFrom")]
        public FValueFrom FValueFrom { get; set; }
    }

    public partial class FValueFrom
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:fieldRef")]
        public FFieldRef FFieldRef { get; set; }
    }

    public partial class FFieldRef
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:apiVersion")]
        public EmptyDir FApiVersion { get; set; }

        [JsonProperty("f:fieldPath")]
        public EmptyDir FFieldPath { get; set; }
    }

    public partial class KNameKubeProxyFSecurityContext
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:privileged")]
        public EmptyDir FPrivileged { get; set; }
    }

    public partial class KNameKubeProxyFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/lib/modules\"}")]
        public KMountPath KMountPathLibModules { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/run/xtables.lock\"}")]
        public KMountPath KMountPathRunXtablesLock { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/var/lib/kube-proxy\"}")]
        public KMountPath KMountPathVarLibKubeProxy { get; set; }
    }

    public partial class KNameKubeScheduler
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public KNameKubeApiserverFResources FResources { get; set; }

        [JsonProperty("f:startupProbe")]
        public FLivenessProbeClass FStartupProbe { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameKubeSchedulerFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameKubeSchedulerFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/etc/kubernetes/scheduler.conf\"}")]
        public KMountPath KMountPathEtcKubernetesSchedulerConf { get; set; }
    }

    public partial class KNameKubernetesDashboard
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:args")]
        public EmptyDir FArgs { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:livenessProbe")]
        public FLivenessProbeClass FLivenessProbe { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:ports")]
        public KNameKubernetesDashboardFPorts FPorts { get; set; }

        [JsonProperty("f:resources")]
        public EmptyDir FResources { get; set; }

        [JsonProperty("f:securityContext")]
        public KNameDashboardMetricsScraperFSecurityContext FSecurityContext { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameKubernetesDashboardFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameKubernetesDashboardFPorts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"containerPort\":8443,\"protocol\":\"TCP\"}")]
        public KContainerPort KContainerPort8443ProtocolTcp { get; set; }
    }

    public partial class KNameKubernetesDashboardFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/certs\"}")]
        public KMountPath KMountPathCerts { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/tmp\"}")]
        public KMountPath KMountPathTmp { get; set; }
    }

    public partial class KNameStorageProvisioner
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:args")]
        public EmptyDir FArgs { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public EmptyDir FResources { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameStorageProvisionerFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameStorageProvisionerFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/var/lib/k8s-pvs\"}")]
        public KMountPath KMountPathVarLibK8SPvs { get; set; }
    }

    public partial class KNameVpnkitController
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:command")]
        public EmptyDir FCommand { get; set; }

        [JsonProperty("f:image")]
        public EmptyDir FImage { get; set; }

        [JsonProperty("f:imagePullPolicy")]
        public EmptyDir FImagePullPolicy { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:resources")]
        public EmptyDir FResources { get; set; }

        [JsonProperty("f:terminationMessagePath")]
        public EmptyDir FTerminationMessagePath { get; set; }

        [JsonProperty("f:terminationMessagePolicy")]
        public EmptyDir FTerminationMessagePolicy { get; set; }

        [JsonProperty("f:volumeMounts")]
        public KNameVpnkitControllerFVolumeMounts FVolumeMounts { get; set; }
    }

    public partial class KNameVpnkitControllerFVolumeMounts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"mountPath\":\"/run/host-services/backend.sock\"}")]
        public KMountPath KMountPathRunHostServicesBackendSock { get; set; }
    }

    public partial class FNodeSelector
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:kubernetes.io/os")]
        public EmptyDir FKubernetesIoOs { get; set; }
    }

    public partial class FSpecFSecurityContext
    {
        [JsonProperty(".", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:seccompProfile", NullValueHandling = NullValueHandling.Ignore)]
        public FSeccompProfile FSeccompProfile { get; set; }
    }

    public partial class FSeccompProfile
    {
        [JsonProperty("f:type")]
        public EmptyDir FType { get; set; }
    }

    public partial class FVolumes
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"name\":\"config-volume\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameConfigVolumeClass KNameConfigVolume { get; set; }

        [JsonProperty("k:{\"name\":\"etcd-certs\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameEtcdCerts { get; set; }

        [JsonProperty("k:{\"name\":\"etcd-data\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameEtcdData { get; set; }

        [JsonProperty("k:{\"name\":\"ca-certs\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameCaCerts { get; set; }

        [JsonProperty("k:{\"name\":\"etc-ca-certificates\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameEtcCaCertificates { get; set; }

        [JsonProperty("k:{\"name\":\"k8s-certs\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameK8SCerts { get; set; }

        [JsonProperty("k:{\"name\":\"usr-local-share-ca-certificates\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameUsrLocalShareCaCertificates { get; set; }

        [JsonProperty("k:{\"name\":\"usr-share-ca-certificates\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameUsrShareCaCertificates { get; set; }

        [JsonProperty("k:{\"name\":\"flexvolume-dir\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameFlexvolumeDir { get; set; }

        [JsonProperty("k:{\"name\":\"kubeconfig\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameKubeconfig { get; set; }

        [JsonProperty("k:{\"name\":\"kube-proxy\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameConfigVolumeClass KNameKubeProxy { get; set; }

        [JsonProperty("k:{\"name\":\"lib-modules\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameLibModules { get; set; }

        [JsonProperty("k:{\"name\":\"xtables-lock\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameXtablesLock { get; set; }

        [JsonProperty("k:{\"name\":\"pvs\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNamePvs { get; set; }

        [JsonProperty("k:{\"name\":\"api\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameApiClass KNameApi { get; set; }

        [JsonProperty("k:{\"name\":\"tmp-volume\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameTmpVolume KNameTmpVolume { get; set; }

        [JsonProperty("k:{\"name\":\"kubernetes-dashboard-certs\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KNameKubernetesDashboardCerts KNameKubernetesDashboardCerts { get; set; }
    }

    public partial class KNameApiClass
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:hostPath")]
        public FHostPath FHostPath { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }
    }

    public partial class FHostPath
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:path")]
        public EmptyDir FPath { get; set; }

        [JsonProperty("f:type")]
        public EmptyDir FType { get; set; }
    }

    public partial class KNameConfigVolumeClass
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:configMap")]
        public FConfigMap FConfigMap { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }
    }

    public partial class FConfigMap
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:defaultMode")]
        public EmptyDir FDefaultMode { get; set; }

        [JsonProperty("f:items", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FItems { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }
    }

    public partial class KNameKubernetesDashboardCerts
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }

        [JsonProperty("f:secret")]
        public FSecret FSecret { get; set; }
    }

    public partial class FSecret
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:defaultMode")]
        public EmptyDir FDefaultMode { get; set; }

        [JsonProperty("f:secretName")]
        public EmptyDir FSecretName { get; set; }
    }

    public partial class KNameTmpVolume
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:emptyDir")]
        public EmptyDir FEmptyDir { get; set; }

        [JsonProperty("f:name")]
        public EmptyDir FName { get; set; }
    }

    public partial class FStatus
    {
        [JsonProperty("f:conditions")]
        public FConditions FConditions { get; set; }

        [JsonProperty("f:containerStatuses", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FContainerStatuses { get; set; }

        [JsonProperty("f:hostIP", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FHostIp { get; set; }

        [JsonProperty("f:phase", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FPhase { get; set; }

        [JsonProperty("f:podIP", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FPodIp { get; set; }

        [JsonProperty("f:podIPs", NullValueHandling = NullValueHandling.Ignore)]
        public FPodIPs FPodIPs { get; set; }

        [JsonProperty("f:startTime", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FStartTime { get; set; }
    }

    public partial class FConditions
    {
        [JsonProperty(".", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"type\":\"PodScheduled\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KTypePodScheduled KTypePodScheduled { get; set; }

        [JsonProperty("k:{\"type\":\"ContainersReady\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KType KTypeContainersReady { get; set; }

        [JsonProperty("k:{\"type\":\"Initialized\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KType KTypeInitialized { get; set; }

        [JsonProperty("k:{\"type\":\"Ready\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KType KTypeReady { get; set; }
    }

    public partial class KType
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:lastProbeTime")]
        public EmptyDir FLastProbeTime { get; set; }

        [JsonProperty("f:lastTransitionTime")]
        public EmptyDir FLastTransitionTime { get; set; }

        [JsonProperty("f:status")]
        public EmptyDir FStatus { get; set; }

        [JsonProperty("f:type")]
        public EmptyDir FType { get; set; }
    }

    public partial class KTypePodScheduled
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:lastProbeTime")]
        public EmptyDir FLastProbeTime { get; set; }

        [JsonProperty("f:lastTransitionTime")]
        public EmptyDir FLastTransitionTime { get; set; }

        [JsonProperty("f:message", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FMessage { get; set; }

        [JsonProperty("f:reason", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir FReason { get; set; }

        [JsonProperty("f:status")]
        public EmptyDir FStatus { get; set; }

        [JsonProperty("f:type")]
        public EmptyDir FType { get; set; }
    }

    public partial class FPodIPs
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.78\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101078 { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.77\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101077 { get; set; }

        [JsonProperty("k:{\"ip\":\"192.168.65.4\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp192168654 { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.75\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101075 { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.76\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101076 { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.79\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101079 { get; set; }

        [JsonProperty("k:{\"ip\":\"10.1.0.80\"}", NullValueHandling = NullValueHandling.Ignore)]
        public KIp1 KIp101080 { get; set; }
    }

    public partial class KIp1
    {
        [JsonProperty(".")]
        public EmptyDir Empty { get; set; }

        [JsonProperty("f:ip")]
        public EmptyDir FIp { get; set; }
    }

    public partial class OwnerReference
    {
        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("uid")]
        public Guid Uid { get; set; }

        [JsonProperty("controller")]
        public bool Controller { get; set; }

        [JsonProperty("blockOwnerDeletion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlockOwnerDeletion { get; set; }
    }

    public partial class Spec
    {
        [JsonProperty("volumes")]
        public Volume[] Volumes { get; set; }

        [JsonProperty("containers")]
        public Container[] Containers { get; set; }

        [JsonProperty("restartPolicy")]
        public string RestartPolicy { get; set; }

        [JsonProperty("terminationGracePeriodSeconds")]
        public long TerminationGracePeriodSeconds { get; set; }

        [JsonProperty("dnsPolicy")]
        public string DnsPolicy { get; set; }

        [JsonProperty("nodeSelector", NullValueHandling = NullValueHandling.Ignore)]
        public NodeSelector NodeSelector { get; set; }

        [JsonProperty("serviceAccountName", NullValueHandling = NullValueHandling.Ignore)]
        public string ServiceAccountName { get; set; }

        [JsonProperty("serviceAccount", NullValueHandling = NullValueHandling.Ignore)]
        public string ServiceAccount { get; set; }

        [JsonProperty("nodeName")]
        public string NodeName { get; set; }

        [JsonProperty("securityContext")]
        public SpecSecurityContext SecurityContext { get; set; }

        [JsonProperty("schedulerName")]
        public string SchedulerName { get; set; }

        [JsonProperty("tolerations")]
        public Toleration[] Tolerations { get; set; }

        [JsonProperty("priorityClassName", NullValueHandling = NullValueHandling.Ignore)]
        public string PriorityClassName { get; set; }

        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("enableServiceLinks")]
        public bool EnableServiceLinks { get; set; }

        [JsonProperty("preemptionPolicy")]
        public string PreemptionPolicy { get; set; }

        [JsonProperty("hostNetwork", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HostNetwork { get; set; }

        [JsonProperty("affinity", NullValueHandling = NullValueHandling.Ignore)]
        public Affinity Affinity { get; set; }
    }

    public partial class Affinity
    {
        [JsonProperty("nodeAffinity")]
        public NodeAffinity NodeAffinity { get; set; }
    }

    public partial class NodeAffinity
    {
        [JsonProperty("requiredDuringSchedulingIgnoredDuringExecution")]
        public RequiredDuringSchedulingIgnoredDuringExecution RequiredDuringSchedulingIgnoredDuringExecution { get; set; }
    }

    public partial class RequiredDuringSchedulingIgnoredDuringExecution
    {
        [JsonProperty("nodeSelectorTerms")]
        public NodeSelectorTerm[] NodeSelectorTerms { get; set; }
    }

    public partial class NodeSelectorTerm
    {
        [JsonProperty("matchFields")]
        public MatchField[] MatchFields { get; set; }
    }

    public partial class MatchField
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("operator")]
        public string Operator { get; set; }

        [JsonProperty("values")]
        public string[] Values { get; set; }
    }

    public partial class Container
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("args", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Args { get; set; }

        [JsonProperty("ports", NullValueHandling = NullValueHandling.Ignore)]
        public Port[] Ports { get; set; }

        [JsonProperty("resources")]
        public Resources Resources { get; set; }

        [JsonProperty("volumeMounts")]
        public VolumeMount[] VolumeMounts { get; set; }

        [JsonProperty("livenessProbe", NullValueHandling = NullValueHandling.Ignore)]
        public LivenessProbeClass LivenessProbe { get; set; }

        [JsonProperty("readinessProbe", NullValueHandling = NullValueHandling.Ignore)]
        public LivenessProbeClass ReadinessProbe { get; set; }

        [JsonProperty("terminationMessagePath")]
        public string TerminationMessagePath { get; set; }

        [JsonProperty("terminationMessagePolicy")]
        public string TerminationMessagePolicy { get; set; }

        [JsonProperty("imagePullPolicy")]
        public string ImagePullPolicy { get; set; }

        [JsonProperty("securityContext", NullValueHandling = NullValueHandling.Ignore)]
        public ContainerSecurityContext SecurityContext { get; set; }

        [JsonProperty("command", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Command { get; set; }

        [JsonProperty("startupProbe", NullValueHandling = NullValueHandling.Ignore)]
        public LivenessProbeClass StartupProbe { get; set; }

        [JsonProperty("env", NullValueHandling = NullValueHandling.Ignore)]
        public Env[] Env { get; set; }
    }

    public partial class Env
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("valueFrom")]
        public ValueFrom ValueFrom { get; set; }
    }

    public partial class ValueFrom
    {
        [JsonProperty("fieldRef")]
        public FieldRef FieldRef { get; set; }
    }

    public partial class FieldRef
    {
        [JsonProperty("apiVersion")]
        public string ApiVersion { get; set; }

        [JsonProperty("fieldPath")]
        public string FieldPath { get; set; }
    }

    public partial class LivenessProbeClass
    {
        [JsonProperty("httpGet")]
        public HttpGet HttpGet { get; set; }

        [JsonProperty("initialDelaySeconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? InitialDelaySeconds { get; set; }

        [JsonProperty("timeoutSeconds")]
        public long TimeoutSeconds { get; set; }

        [JsonProperty("periodSeconds")]
        public long PeriodSeconds { get; set; }

        [JsonProperty("successThreshold")]
        public long SuccessThreshold { get; set; }

        [JsonProperty("failureThreshold")]
        public long FailureThreshold { get; set; }
    }

    public partial class HttpGet
    {
        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("port")]
        public long Port { get; set; }

        [JsonProperty("scheme")]
        public string Scheme { get; set; }

        [JsonProperty("host", NullValueHandling = NullValueHandling.Ignore)]
        public string Host { get; set; }
    }

    public partial class Port
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("containerPort")]
        public long ContainerPort { get; set; }

        [JsonProperty("protocol")]
        public string Protocol { get; set; }
    }

    public partial class Resources
    {
        [JsonProperty("limits", NullValueHandling = NullValueHandling.Ignore)]
        public Limits Limits { get; set; }

        [JsonProperty("requests", NullValueHandling = NullValueHandling.Ignore)]
        public Requests Requests { get; set; }
    }

    public partial class Limits
    {
        [JsonProperty("memory")]
        public string Memory { get; set; }
    }

    public partial class Requests
    {
        [JsonProperty("cpu")]
        public string Cpu { get; set; }

        [JsonProperty("memory", NullValueHandling = NullValueHandling.Ignore)]
        public string Memory { get; set; }
    }

    public partial class ContainerSecurityContext
    {
        [JsonProperty("capabilities", NullValueHandling = NullValueHandling.Ignore)]
        public Capabilities Capabilities { get; set; }

        [JsonProperty("readOnlyRootFilesystem", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReadOnlyRootFilesystem { get; set; }

        [JsonProperty("allowPrivilegeEscalation", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowPrivilegeEscalation { get; set; }

        [JsonProperty("privileged", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Privileged { get; set; }

        [JsonProperty("runAsUser", NullValueHandling = NullValueHandling.Ignore)]
        public long? RunAsUser { get; set; }

        [JsonProperty("runAsGroup", NullValueHandling = NullValueHandling.Ignore)]
        public long? RunAsGroup { get; set; }
    }

    public partial class Capabilities
    {
        [JsonProperty("add")]
        public string[] Add { get; set; }

        [JsonProperty("drop")]
        public string[] Drop { get; set; }
    }

    public partial class VolumeMount
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("readOnly", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        [JsonProperty("mountPath")]
        public string MountPath { get; set; }
    }

    public partial class NodeSelector
    {
        [JsonProperty("kubernetes.io/os")]
        public string KubernetesIoOs { get; set; }
    }

    public partial class SpecSecurityContext
    {
        [JsonProperty("seccompProfile", NullValueHandling = NullValueHandling.Ignore)]
        public SeccompProfile SeccompProfile { get; set; }
    }

    public partial class SeccompProfile
    {
        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Toleration
    {
        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("operator", NullValueHandling = NullValueHandling.Ignore)]
        public string Operator { get; set; }

        [JsonProperty("effect", NullValueHandling = NullValueHandling.Ignore)]
        public string Effect { get; set; }

        [JsonProperty("tolerationSeconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? TolerationSeconds { get; set; }
    }

    public partial class Volume
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("configMap", NullValueHandling = NullValueHandling.Ignore)]
        public VolumeConfigMap ConfigMap { get; set; }

        [JsonProperty("projected", NullValueHandling = NullValueHandling.Ignore)]
        public Projected Projected { get; set; }

        [JsonProperty("hostPath", NullValueHandling = NullValueHandling.Ignore)]
        public HostPath HostPath { get; set; }

        [JsonProperty("emptyDir", NullValueHandling = NullValueHandling.Ignore)]
        public EmptyDir EmptyDir { get; set; }

        [JsonProperty("secret", NullValueHandling = NullValueHandling.Ignore)]
        public Secret Secret { get; set; }
    }

    public partial class VolumeConfigMap
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ConfigMapItem[] Items { get; set; }

        [JsonProperty("defaultMode")]
        public long DefaultMode { get; set; }
    }

    public partial class ConfigMapItem
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class HostPath
    {
        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Projected
    {
        [JsonProperty("sources")]
        public Source[] Sources { get; set; }

        [JsonProperty("defaultMode")]
        public long DefaultMode { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("serviceAccountToken", NullValueHandling = NullValueHandling.Ignore)]
        public ServiceAccountToken ServiceAccountToken { get; set; }

        [JsonProperty("configMap", NullValueHandling = NullValueHandling.Ignore)]
        public SourceConfigMap ConfigMap { get; set; }

        [JsonProperty("downwardAPI", NullValueHandling = NullValueHandling.Ignore)]
        public DownwardApi DownwardApi { get; set; }
    }

    public partial class SourceConfigMap
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("items")]
        public ConfigMapItem[] Items { get; set; }
    }

    public partial class DownwardApi
    {
        [JsonProperty("items")]
        public DownwardApiItem[] Items { get; set; }
    }

    public partial class DownwardApiItem
    {
        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("fieldRef")]
        public FieldRef FieldRef { get; set; }
    }

    public partial class ServiceAccountToken
    {
        [JsonProperty("expirationSeconds")]
        public long ExpirationSeconds { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Secret
    {
        [JsonProperty("secretName")]
        public string SecretName { get; set; }

        [JsonProperty("defaultMode")]
        public long DefaultMode { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("phase")]
        public string Phase { get; set; }

        [JsonProperty("conditions")]
        public Condition[] Conditions { get; set; }

        [JsonProperty("hostIP")]
        public string HostIp { get; set; }

        [JsonProperty("podIP")]
        public string PodIp { get; set; }

        [JsonProperty("podIPs")]
        public PodIp[] PodIPs { get; set; }

        [JsonProperty("startTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("containerStatuses")]
        public ContainerStatus[] ContainerStatuses { get; set; }

        [JsonProperty("qosClass")]
        public string QosClass { get; set; }
    }

    public partial class Condition
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("lastProbeTime")]
        public object LastProbeTime { get; set; }

        [JsonProperty("lastTransitionTime")]
        public DateTimeOffset LastTransitionTime { get; set; }
    }

    public partial class ContainerStatus
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("lastState")]
        public LastState LastState { get; set; }

        [JsonProperty("ready")]
        public bool Ready { get; set; }

        [JsonProperty("restartCount")]
        public long RestartCount { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("imageID")]
        public string ImageId { get; set; }

        [JsonProperty("containerID")]
        public string ContainerId { get; set; }

        [JsonProperty("started")]
        public bool Started { get; set; }
    }

    public partial class LastState
    {
        [JsonProperty("terminated")]
        public Terminated Terminated { get; set; }
    }

    public partial class Terminated
    {
        [JsonProperty("exitCode")]
        public long ExitCode { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }

        [JsonProperty("startedAt")]
        public DateTimeOffset StartedAt { get; set; }

        [JsonProperty("finishedAt")]
        public DateTimeOffset FinishedAt { get; set; }

        [JsonProperty("containerID")]
        public string ContainerId { get; set; }
    }

    public partial class State
    {
        [JsonProperty("running")]
        public Running Running { get; set; }
    }

    public partial class Running
    {
        [JsonProperty("startedAt")]
        public DateTimeOffset StartedAt { get; set; }
    }

    public partial class PodIp
    {
        [JsonProperty("ip")]
        public string Ip { get; set; }
    }

    public partial class PodInfoMetadata
    {
        [JsonProperty("resourceVersion")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ResourceVersion { get; set; }
    }

    public partial class PodInfo
    {
        public static PodInfo FromJson(string json) => JsonConvert.DeserializeObject<PodInfo>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PodInfo self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
